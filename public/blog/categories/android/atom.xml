<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Gadget Habit]]></title>
  <link href="http://michaelevans.org/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2015-09-09T16:37:28-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Droidcon NYC 2015: @AnnotationProcessors("ByExample")]]></title>
    <link href="http://michaelevans.org/blog/2015/09/09/droidcon-nyc-2015-at-annotationprocessors-byexample/"/>
    <updated>2015-09-09T16:30:48-04:00</updated>
    <id>http://michaelevans.org/blog/2015/09/09/droidcon-nyc-2015-at-annotationprocessors-byexample</id>
    <content type="html"><![CDATA[<p>Here are slides and the video for my talk from Droidcon NYC 2015 on writing your own Annotation Processor:</p>

<p><iframe width="640" height="510" src="http://www.youtube.com/embed/dBUAqPs0TB0 " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowfullscreen></iframe></p>

<p><script async="true" class="speakerdeck-embed" data-id="95e696d902d845dcb5079e0691eb5f3f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"> </script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ColorArt: a library to do iTunes 11-style color matching for Android]]></title>
    <link href="http://michaelevans.org/blog/2013/12/12/colorart-a-library-to-do-itunes-11-style-color-matching-for-android/"/>
    <updated>2013-12-12T00:02:34-05:00</updated>
    <id>http://michaelevans.org/blog/2013/12/12/colorart-a-library-to-do-itunes-11-style-color-matching-for-android</id>
    <content type="html"><![CDATA[<p>Last week I open sourced an Android library called <a href="https://github.com/MichaelEvans/ColorArt">ColorArt</a>, which is a port of the popular OS X library written by the guys over at <a href="http://www.panic.com/blog/itunes-11-and-colors/">Panic</a>. It allows you to use a source image to create a themed image/text display, very similar to the effect which is done in iTunes 11.</p>

<p><img class="center" src="/images/2013/12/12/itunes-11.png" width="600" height="600" title="iTunes Example" ></p>

<!-- more -->


<h3>Using the Library</h3>

<p>ColorArt is pretty easy to use, and can add a cool effect to any app. In order to add it to your project, add the dependency to your <code>build.gradle</code> file:</p>

<p><code>
compile 'org.michaelevans.colorart:library:0.0.1'﻿
</code></p>

<p>The next thing you need is to take a Bitmap that you want to use, and pass it to a ColorArt object:</p>

<p><code>
Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.album);
ColorArt colorArt = new ColorArt(bitmap);
</code></p>

<p>After that, it&rsquo;s as simple as calling some getter methods in order to get the colors that make up the image:</p>

<p><code>
colorArt.getBackgroundColor()
colorArt.getPrimaryColor()
colorArt.getSecondaryColor()
colorArt.getDetailColor()
</code></p>

<p>Voilà! Now you can make cool themed image/text display using Bitmaps as part of your application.</p>

<p><img class="center" src="/images/2013/12/12/sample.png" width="300" height="300" title="Sample" ></p>

<h3>Bonus: FadingImageView</h3>

<p>I also added a class that extends ImageView, which will allow you to add a subtle gradient from the image, to the background color, similar to what you see in the iTunes display. It&rsquo;s also extremely easy to use:</p>

<ol>
<li>Replace the ImageView that you are presently using with a <code>FadingImageView</code>.</li>
<li>Call
<code>
mFadingImageView.setBackgroundColor(colorArt.getBackgroundColor(), FadingImageView.FadeSide.LEFT);
</code>
to set the background color to fade to, and which side gets the gradient.</li>
</ol>


<p>That&rsquo;s it!</p>

<p>You can also toggle that gradient with a call to <code>mImageView.setFadeEnabled(true/false);</code>.</p>

<hr />

<p>Are you using this library in your app? Please let me know so I can add a link to it on the <a href="https://github.com/MichaelEvans/ColorArt">GitHub project page</a>! Also, feel free to send pull requests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a ViewPager in a ScrollView]]></title>
    <link href="http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview/"/>
    <updated>2013-10-13T20:48:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview</id>
    <content type="html"><![CDATA[<p>For a new app that I&rsquo;m working on, I wanted to use a ViewPager inside a ScrollView in order to make a simple image carousel. The only problem is, ScrollViews don&rsquo;t seem to play nicely with horizontally swiping Views. As soon as the user moves their finger even slightly up or down, the ViewPager page change is cancelled, and the page snaps back to the current item. This can lead to an extremely frustrating user experience, because it is difficult for the user to understand why the views won&rsquo;t swipe.</p>

<!-- more -->


<p>A popular solution that I&rsquo;ve seen online is to use the ViewPager&rsquo;s <code>getParent().requestDisallowInterceptTouchEvent(true);</code> method to prevent the ScrollView from scrolling while the ViewPager is being touched or scrolled. The solution that I&rsquo;ve been using is a bit like this, but it provides a little bit of a &ldquo;drag threshold&rdquo;, which is a bit forgiving in the event that the user is trying to drag the ScrollView, but happens to have their finger in the ViewPager. The code I used is as follows:</p>

<p>``` java PagerTouchListener.java
mPager.setOnTouchListener(new View.OnTouchListener() {</p>

<pre><code>int dragthreshold = 30;
int downX;
int downY;

@Override 
public boolean onTouch(View v, MotionEvent event) {

    switch (event.getAction()) {
    case MotionEvent.ACTION_DOWN:
        downX = (int) event.getRawX();
        downY = (int) event.getRawY();
        break; 
    case MotionEvent.ACTION_MOVE:
        int distanceX = Math.abs((int) event.getRawX() - downX);
        int distanceY = Math.abs((int) event.getRawY() - downY);

        if (distanceY &gt; distanceX &amp;&amp; distanceY &gt; dragthreshold) {
            mPager.getParent().requestDisallowInterceptTouchEvent(false); 
            mScrollView.getParent().requestDisallowInterceptTouchEvent(true); 
        } else if (distanceX &gt; distanceY &amp;&amp; distanceX &gt; dragthreshold) {
            mPager.getParent().requestDisallowInterceptTouchEvent(true); 
            mScrollView.getParent().requestDisallowInterceptTouchEvent(false); 
        } 
        break; 
    case MotionEvent.ACTION_UP:
        mScrollView.getParent().requestDisallowInterceptTouchEvent(false); 
        mPager.getParent().requestDisallowInterceptTouchEvent(false); 
        break; 
    } 
    return false; 
} 
</code></pre>

<p>});
```</p>

<p>I found this very useful solution on <a href="http://stackoverflow.com/questions/8381697/viewpager-inside-a-scrollview-does-not-scroll-correclty/16224484#16224484">StackOverflow</a>, among many other solutions that did work (although not as nicely as this one).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Newest App: Bike Finder]]></title>
    <link href="http://michaelevans.org/blog/2013/09/16/my-newest-app-bike-finder/"/>
    <updated>2013-09-16T23:11:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/09/16/my-newest-app-bike-finder</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/2013/09/16/map.png" width="240" height="400" title="Map" ></p>

<p>Last week I released my newest Android app, <a href="https://play.google.com/store/apps/details?id=org.michaelevans.bikefinder&amp;referrer=utm_source%3Dblog">Bike Finder</a>. It&rsquo;s a fairly straight forward application that allows you to find bikes and stations for use with Washington DC&rsquo;s Capital Bikeshare system. For those of you not local to DC, Capital Bikeshare is a system that lets you use bikes that are available at docking stations all over the city, as well as parts of northern Virginia. The app is free, and I&rsquo;m looking into adding additional cities that have companies that make their bike sharing data available (currently investigating New York City, Montreal and the Bay Area). If you&rsquo;d like to get your city added, <a href="http://twitter.com/m_evans10">let me know</a>, and I&rsquo;ll see if the data is available, and add it to the to-do list.</p>

<!-- more -->


<p><img class="left" src="/images/2013/09/16/details.png" width="240" height="400" title="Details" ></p>

<p>I&rsquo;m also planning to add some other cool features, like a notification when a &ldquo;favorite&rdquo; station is low on bikes, or when a &ldquo;favorite&rdquo; station is full (so you know you&rsquo;ll have to bring the bike elsewhere). I&rsquo;m also looking into adding some directions/searching feature, so you can navigate your way around the city without having to leave the application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parse Android To-do App Tutorial - Part Two - Users]]></title>
    <link href="http://michaelevans.org/blog/2013/08/20/parse-android-todo-app-tutorial-part-two-users/"/>
    <updated>2013-08-20T21:13:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/08/20/parse-android-todo-app-tutorial-part-two-users</id>
    <content type="html"><![CDATA[<p>Last week <a href="http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/">I posted a tutorial</a> on how to create a really basic Android To-do list application using <a href="http://www.parse.com">Parse</a>. It allowed a user to create tasks, and then toggle their completion status. Then, this information was synced to a server, so that the tasks will be kept up to date on multiple devices. The biggest issue with this app so far, was that there was no concept of users, so all tasks were shared among everyone. This week, we&rsquo;re going to introduce two new screens (which are very similar to one another), the registration and login screens.</p>

<!-- more -->


<h3>The Setup</h3>

<p>The first thing we&rsquo;re have to do is two create two new activities, as I mentioned before. I called these <code>LoginActivity</code> and <code>RegisterActivity</code>. For simplicity sake, I&rsquo;ll assume that you used the New Activity Wizard, like we did last week to create the TodoActivity. You can also try the &ldquo;LoginActivity&rdquo; template from the wizard, but we&rsquo;ll skip that for this tutorial.</p>

<h3>Let&rsquo;s Code</h3>

<p>Once you have both those activities set up, let&rsquo;s fill up their layouts. We need to add the following items to these layouts: two <code>EditText</code> fields for a username and password, two <code>TextViews</code> to be the labels for these inputs, and two <code>Buttons</code>, one to sign in/sign up, and one to switch from the sign up to sign in screen and vice versa.</p>

<p>Here&rsquo;s what my registration layout looks like:</p>

<p>``` xml
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:paddingBottom="@dimen/activity_vertical_margin"
android:paddingLeft="@dimen/activity_horizontal_margin"
android:paddingRight="@dimen/activity_horizontal_margin"
android:paddingTop="@dimen/activity_vertical_margin"
tools:context=".RegisterActivity" &gt;

&lt;LinearLayout
    android:layout_width="match_parent"
    android:layout_height="0dp"
    android:layout_weight="1"
    android:gravity="center_vertical"
    android:orientation="vertical" &gt;

    &lt;TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/username" /&gt;

    &lt;EditText
        android:id="@+id/register_username"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:ems="10"
        android:inputType="text" &gt;

        &lt;requestFocus /&gt;
    &lt;/EditText&gt;

    &lt;TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Password:" /&gt;

    &lt;EditText
        android:id="@+id/register_password"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:ems="10"
        android:inputType="textPassword" /&gt;

    &lt;Button
        android:id="@+id/sign_up"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="right"
        android:onClick="register"
        android:text="Sign Up" /&gt;
&lt;/LinearLayout&gt;

&lt;Button
    android:id="@+id/signInButton"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:textSize="17sp"
    android:onClick="showLogin"
    android:text="Already Have An Account? Log In!" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>The login screen is very similar to that of the registration screen, with the same widgets in the same places, just different ids and labels, so we&rsquo;re just going to go over the registration screen in this tutorial and leave the login screen up as an exercise to the reader. (The code will be available on <a href="https://github.com/MichaelEvans/Parse-Android-Todo">Github</a> if you get stuck). We&rsquo;re going to want to implement that <code>register</code> function in our RegisterActivity, so let&rsquo;s do that next.</p>

<p><img class="center" src="/images/2013/08/20/login.png" width="300" height="500" title="Logging In" ></p>

<p>After declaring and binding variables to the two <code>EditText</code> fields (we&rsquo;ll call those <code>mUsernameField</code> and <code>mPasswordField</code>), we create our register function:</p>

<p>``` java
public void register(final View v){</p>

<pre><code>if(mUsernameField.getText().length() == 0 || mPasswordField.getText().length() == 0)
    return;

v.setEnabled(false);
ParseUser user = new ParseUser();
user.setUsername(mUsernameField.getText().toString());
user.setPassword(mPasswordField.getText().toString());

user.signUpInBackground(new SignUpCallback() {
    @Override
    public void done(ParseException e) {
        if (e == null) {
            Intent intent = new Intent(RegisterActivity.this, TodoActivity.class);
            startActivity(intent);
            finish();
        } else {
            // Sign up didn't succeed. Look at the ParseException
            // to figure out what went wrong
            v.setEnabled(true);
        }
    }
});
</code></pre>

<p>```</p>

<p><img class="center" src="/images/2013/08/20/registering.png" width="300" height="500" title="Registering" ></p>

<p>What' were doing here is a) bailing out early if the user fails to fill in one of the fields, b) disabling the button while the network request is running, so the user can&rsquo;t try to register multiple times by accident, c) creating a ParseUser object with the username and password from the <code>EditText</code> fields, and then calling <code>signUpInBackground</code>, with a callback which is run when the request is complete. If there is an error for any reason, we re-enable the registration button, so that the user can fix any issues and resubmit. (We&rsquo;ll get to error handling a little later.) If there isn&rsquo;t an error, we start the TodoActivity that we <a href="http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/">created last week</a>.</p>

<p>Huzzah! If you sign up, you now see a users table in your Parse console!</p>

<p><img class="center" src="/images/2013/08/20/users.png" width="800" height="800" title="Users Console" ></p>

<h3>Making Things Belong</h3>

<p>Now we need to make some changes to the TodoActivity. The first thing we need to do is make the query that fetches the data only return Tasks where the user is the same as the logged in user. We can do that by adding the following line that will modify our ParseQuery:
<code>java
query.whereEqualTo("user", ParseUser.getCurrentUser());
</code></p>

<p>We also need to make the Tasks belong to a user where they are created, which we can do by adding the following two statements when we are creating our new Tasks (we&rsquo;re also going to add the setters and getter for the user object on the Task model):</p>

<p><code>java
t.setACL(new ParseACL(ParseUser.getCurrentUser()));
t.setUser(ParseUser.getCurrentUser());
</code></p>

<p>These lines will make the Task only read/writeable by the owner, and set the user associated with them to the current user. Take a peek in your Parse console, and you&rsquo;ll see the Tasks now have an owner!</p>

<p><img class="center" src="/images/2013/08/20/tasks.png" width="800" height="800" title="Tasks now belong!" ></p>

<p>We also want to make it possible for a user to log out. We&rsquo;ll do this by providing an option in the action bar settings menu. We can do this by adding an entry in the <code>res/menu/todo.xml</code> file like the following:</p>

<p>``` xml
&lt;item</p>

<pre><code>android:id="@+id/action_logout"
android:orderInCategory="100"
android:showAsAction="never"
android:title="@string/action_logout"/&gt;
</code></pre>

<p>```</p>

<p>Then all we need to do is wire up this action bar item. When options items are selected, there&rsquo;s a method that will be called in your activity named <code>onOptionsItemSelected</code>. We&rsquo;ll just fill this function out like this:</p>

<p>``` java
public boolean onOptionsItemSelected(MenuItem item) {</p>

<pre><code>switch (item.getItemId()) {
case R.id.action_logout: 
    ParseUser.logOut();
    Intent intent = new Intent(this, LoginActivity.class);
    startActivity(intent);
    finish();
    return true; 
} 
return false; 
</code></pre>

<p>}
<code>``
If the user selects the logout option, call the</code>logout()` method, and then send them back to the login screen.</p>

<p>The last thing we need to do in the TodoActivity is prevent a user from accessing this class while no one is logged in. We can do that back up in the <code>onCreate</code> method:</p>

<p>``` java
ParseUser currentUser = ParseUser.getCurrentUser();
if(currentUser == null){</p>

<pre><code>Intent intent = new Intent(this, LoginActivity.class);
startActivity(intent);
finish();
</code></pre>

<p>}
```</p>

<p>If there is no user currenty logged in, stop the TodoActivity, and forward us to the LoginActivity.</p>

<h3>Error Handling</h3>

<p>As I alluded to before, we&rsquo;re also going to want to add error handling. This way, if the user puts in bad credentials, or they try to register a username that&rsquo;s already taken, they&rsquo;ll get an informative error message. Let&rsquo;s do this by adding a <code>TextView</code> in our layout to display the message: (You&rsquo;ll also want to add a <code>colors.xml</code> file that will declare what <code>@color/red</code> is.)</p>

<p>``` xml
&lt;TextView</p>

<pre><code>android:id="@+id/error_messages"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_gravity="center_horizontal"
android:textColor="@color/red"
android:textAppearance="?android:attr/textAppearanceMedium" /&gt;
</code></pre>

<p>```</p>

<p>Then we&rsquo;ll bind a variable to that view, and add the following error handling to the else statement from our <code>signUpInBackground</code> call:</p>

<p>``` java
switch(e.getCode()){
case ParseException.USERNAME_TAKEN:</p>

<pre><code>mErrorField.setText("Sorry, this username has already been taken.");
break;
</code></pre>

<p>case ParseException.USERNAME_MISSING:</p>

<pre><code>mErrorField.setText("Sorry, you must supply a username to register.");
break;
</code></pre>

<p>case ParseException.PASSWORD_MISSING:</p>

<pre><code>mErrorField.setText("Sorry, you must supply a password to register.");
break;
</code></pre>

<p>default:</p>

<pre><code>mErrorField.setText(e.getLocalizedMessage());
</code></pre>

<p>}
v.setEnabled(true);
```</p>

<p>This will set some nice messages that will explain what the error is, or fall back to the message that Parse sends us, if it&rsquo;s some other type of problem.</p>

<p><img class="center" src="/images/2013/08/20/error_handling.png" width="300" height="500" title="Pretty Error Handling" ></p>

<h3>Possibilities for Next Time</h3>

<p>Next time we can take a look at adding some delete functionality, or maybe tabs for looking over completed/incomplete tasks. Another possiblity is adding social sign in, using Twitter and Facebook. Other suggestions are welcome!</p>

<p><strong>You can find the source on Github <a href="https://github.com/MichaelEvans/Parse-Android-Todo">here</a>.</strong></p>

<hr />

<p>Like this post? Questions, concerns or mistakes? Any other Android tutorials you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment below.</p>
]]></content>
  </entry>
  
</feed>
