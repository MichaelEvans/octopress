<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gadget Habit]]></title>
  <link href="http://michaelevans.org/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2015-09-09T16:37:28-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Droidcon NYC 2015: @AnnotationProcessors("ByExample")]]></title>
    <link href="http://michaelevans.org/blog/2015/09/09/droidcon-nyc-2015-at-annotationprocessors-byexample/"/>
    <updated>2015-09-09T16:30:48-04:00</updated>
    <id>http://michaelevans.org/blog/2015/09/09/droidcon-nyc-2015-at-annotationprocessors-byexample</id>
    <content type="html"><![CDATA[<p>Here are slides and the video for my talk from Droidcon NYC 2015 on writing your own Annotation Processor:</p>

<iframe width="640" height="510" src="http://www.youtube.com/embed/dBUAqPs0TB0 " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowfullscreen></iframe>


<p></p>

<script async="true" class="speakerdeck-embed" data-id="95e696d902d845dcb5079e0691eb5f3f" data-ratio="1.77777777777778" src="http://michaelevans.org//speakerdeck.com/assets/embed.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ColorArt: a library to do iTunes 11-style color matching for Android]]></title>
    <link href="http://michaelevans.org/blog/2013/12/12/colorart-a-library-to-do-itunes-11-style-color-matching-for-android/"/>
    <updated>2013-12-12T00:02:34-05:00</updated>
    <id>http://michaelevans.org/blog/2013/12/12/colorart-a-library-to-do-itunes-11-style-color-matching-for-android</id>
    <content type="html"><![CDATA[<p>Last week I open sourced an Android library called <a href="https://github.com/MichaelEvans/ColorArt">ColorArt</a>, which is a port of the popular OS X library written by the guys over at <a href="http://www.panic.com/blog/itunes-11-and-colors/">Panic</a>. It allows you to use a source image to create a themed image/text display, very similar to the effect which is done in iTunes 11.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/12/12/itunes-11.png" width="600" height="600" title="iTunes Example" ></p>

<!-- more -->


<h3>Using the Library</h3>

<p>ColorArt is pretty easy to use, and can add a cool effect to any app. In order to add it to your project, add the dependency to your <code>build.gradle</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile 'org.michaelevans.colorart:library:0.0.1'﻿</span></code></pre></td></tr></table></div></figure>


<p>The next thing you need is to take a Bitmap that you want to use, and pass it to a ColorArt object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.album);
</span><span class='line'>ColorArt colorArt = new ColorArt(bitmap);</span></code></pre></td></tr></table></div></figure>


<p>After that, it&rsquo;s as simple as calling some getter methods in order to get the colors that make up the image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>colorArt.getBackgroundColor()
</span><span class='line'>colorArt.getPrimaryColor()
</span><span class='line'>colorArt.getSecondaryColor()
</span><span class='line'>colorArt.getDetailColor()</span></code></pre></td></tr></table></div></figure>


<p>Voilà! Now you can make cool themed image/text display using Bitmaps as part of your application.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/12/12/sample.png" width="300" height="300" title="Sample" ></p>

<h3>Bonus: FadingImageView</h3>

<p>I also added a class that extends ImageView, which will allow you to add a subtle gradient from the image, to the background color, similar to what you see in the iTunes display. It&rsquo;s also extremely easy to use:</p>

<ol>
<li>Replace the ImageView that you are presently using with a <code>FadingImageView</code>.</li>
<li>Call</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mFadingImageView.setBackgroundColor(colorArt.getBackgroundColor(), FadingImageView.FadeSide.LEFT);</span></code></pre></td></tr></table></div></figure>


<p>to set the background color to fade to, and which side gets the gradient.</p>

<p>That&rsquo;s it!</p>

<p>You can also toggle that gradient with a call to <code>mImageView.setFadeEnabled(true/false);</code>.</p>

<hr />

<p>Are you using this library in your app? Please let me know so I can add a link to it on the <a href="https://github.com/MichaelEvans/ColorArt">GitHub project page</a>! Also, feel free to send pull requests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hands On with Google Helpouts]]></title>
    <link href="http://michaelevans.org/blog/2013/11/05/hands-on-with-google-helpouts/"/>
    <updated>2013-11-05T10:38:00-05:00</updated>
    <id>http://michaelevans.org/blog/2013/11/05/hands-on-with-google-helpouts</id>
    <content type="html"><![CDATA[<p>This morning Google launched a new product called <a href="https://helpouts.google.com">Helpouts</a>, a tool which will connect people with experts for help via a video conference. I was accepted as a Helpout provider a few weeks back, and have been using the product for a little while during the internal beta. I decided to do an Helpout to teach people to write code, which I cleverly named &ldquo;<a href="https://helpouts.google.com/114052868601022948953/ls/a65184ab017ae8b0">Coding 101: learn the basics of writing code and building apps</a>&rdquo;.</p>

<iframe width="640" height="510" src="http://www.youtube.com/embed/K-VFC9AQM1k " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowfullscreen></iframe>


<p></p>

<!-- more -->


<h3>As a Provider</h3>

<p>As a provider, you are to create a listing which people can sign up for. The process is pretty simple, all that&rsquo;s required is a bit of a description, fill out some pricing options (free, price per minute or per session), some info about yourself explaining your qualificaitons, and a picture for the listing. After that, you&rsquo;ll wait for your listing to be approved by Google.</p>

<p><img class="left" src="http://michaelevans.org/images/2013/11/05/pricing_options.png" width="400" height="400" title="Pricing Options" ></p>

<p>Part of the approval process includes doing a Helpout with a Google employee, in order to get a feel for the system and see how it works. They then also verify the information that you provided to make sure you are who you say you are.</p>

<h3>As a User</h3>

<p>On the consumer side, prospective users can select from any of the categories of Helpouts, which inlude art and music, computer and electronics, cooking, education, fashion and beauty, fitness and nutrition and home and garden. After you select a category, you choose the topic/listing that you&rsquo;re interested in, pick a time, and you&rsquo;ll get an email confirmation regarding your scheduled appointment.</p>

<p><img class="right" src="http://michaelevans.org/images/2013/11/05/your_helpouts.png" width="400" height="500" title="Your Helpouts" ></p>

<p>When its time for your helpout, you&rsquo;ll get a reminder email with a link you can use to quickly join. The interface looks almost identical to the Hangouts UI, except with a few extra widgets to indicate the Helpout title/price/if it&rsquo;s being recorded.</p>

<p>In addition to paricipating from your computer, Google has also launched an <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.helpouts">Android app</a> so that you can get help while you&rsquo;re mobile as well. Whether you&rsquo;re interested in giving Helpouts a shot, want to learn about writing apps for Android, or just want to see what the newest Google product looks like &ndash; feel free to checkout <a href="https://helpouts.google.com/114052868601022948953/ls/a65184ab017ae8b0">my listing!</a>.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/11/05/waiting.png" width="600" height="600" title="Waiting" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a ViewPager in a ScrollView]]></title>
    <link href="http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview/"/>
    <updated>2013-10-13T20:48:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview</id>
    <content type="html"><![CDATA[<p>For a new app that I&rsquo;m working on, I wanted to use a ViewPager inside a ScrollView in order to make a simple image carousel. The only problem is, ScrollViews don&rsquo;t seem to play nicely with horizontally swiping Views. As soon as the user moves their finger even slightly up or down, the ViewPager page change is cancelled, and the page snaps back to the current item. This can lead to an extremely frustrating user experience, because it is difficult for the user to understand why the views won&rsquo;t swipe.</p>

<!-- more -->


<p>A popular solution that I&rsquo;ve seen online is to use the ViewPager&rsquo;s <code>getParent().requestDisallowInterceptTouchEvent(true);</code> method to prevent the ScrollView from scrolling while the ViewPager is being touched or scrolled. The solution that I&rsquo;ve been using is a bit like this, but it provides a little bit of a &ldquo;drag threshold&rdquo;, which is a bit forgiving in the event that the user is trying to drag the ScrollView, but happens to have their finger in the ViewPager. The code I used is as follows:</p>

<figure class='code'><figcaption><span>PagerTouchListener.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mPager</span><span class="o">.</span><span class="na">setOnTouchListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnTouchListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">dragthreshold</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">downX</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">downY</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouch</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>            <span class="n">downX</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawX</span><span class="o">();</span>
</span><span class='line'>            <span class="n">downY</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawY</span><span class="o">();</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">distanceX</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawX</span><span class="o">()</span> <span class="o">-</span> <span class="n">downX</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">distanceY</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawY</span><span class="o">()</span> <span class="o">-</span> <span class="n">downY</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">distanceY</span> <span class="o">&gt;</span> <span class="n">distanceX</span> <span class="o">&amp;&amp;</span> <span class="n">distanceY</span> <span class="o">&gt;</span> <span class="n">dragthreshold</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPager</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                <span class="n">mScrollView</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">distanceX</span> <span class="o">&gt;</span> <span class="n">distanceY</span> <span class="o">&amp;&amp;</span> <span class="n">distanceX</span> <span class="o">&gt;</span> <span class="n">dragthreshold</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPager</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                <span class="n">mScrollView</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="n">mScrollView</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mPager</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I found this very useful solution on <a href="http://stackoverflow.com/questions/8381697/viewpager-inside-a-scrollview-does-not-scroll-correclty/16224484#16224484">StackOverflow</a>, among many other solutions that did work (although not as nicely as this one).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Newest App: Bike Finder]]></title>
    <link href="http://michaelevans.org/blog/2013/09/16/my-newest-app-bike-finder/"/>
    <updated>2013-09-16T23:11:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/09/16/my-newest-app-bike-finder</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://michaelevans.org/images/2013/09/16/map.png" width="240" height="400" title="Map" ></p>

<p>Last week I released my newest Android app, <a href="https://play.google.com/store/apps/details?id=org.michaelevans.bikefinder&amp;referrer=utm_source%3Dblog">Bike Finder</a>. It&rsquo;s a fairly straight forward application that allows you to find bikes and stations for use with Washington DC&rsquo;s Capital Bikeshare system. For those of you not local to DC, Capital Bikeshare is a system that lets you use bikes that are available at docking stations all over the city, as well as parts of northern Virginia. The app is free, and I&rsquo;m looking into adding additional cities that have companies that make their bike sharing data available (currently investigating New York City, Montreal and the Bay Area). If you&rsquo;d like to get your city added, <a href="http://twitter.com/m_evans10">let me know</a>, and I&rsquo;ll see if the data is available, and add it to the to-do list.</p>

<!-- more -->


<p><img class="left" src="http://michaelevans.org/images/2013/09/16/details.png" width="240" height="400" title="Details" ></p>

<p>I&rsquo;m also planning to add some other cool features, like a notification when a &ldquo;favorite&rdquo; station is low on bikes, or when a &ldquo;favorite&rdquo; station is full (so you know you&rsquo;ll have to bring the bike elsewhere). I&rsquo;m also looking into adding some directions/searching feature, so you can navigate your way around the city without having to leave the application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parse Android To-do App Tutorial - Part Two - Users]]></title>
    <link href="http://michaelevans.org/blog/2013/08/20/parse-android-todo-app-tutorial-part-two-users/"/>
    <updated>2013-08-20T21:13:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/08/20/parse-android-todo-app-tutorial-part-two-users</id>
    <content type="html"><![CDATA[<p>Last week <a href="http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/">I posted a tutorial</a> on how to create a really basic Android To-do list application using <a href="http://www.parse.com">Parse</a>. It allowed a user to create tasks, and then toggle their completion status. Then, this information was synced to a server, so that the tasks will be kept up to date on multiple devices. The biggest issue with this app so far, was that there was no concept of users, so all tasks were shared among everyone. This week, we&rsquo;re going to introduce two new screens (which are very similar to one another), the registration and login screens.</p>

<!-- more -->


<h3>The Setup</h3>

<p>The first thing we&rsquo;re have to do is two create two new activities, as I mentioned before. I called these <code>LoginActivity</code> and <code>RegisterActivity</code>. For simplicity sake, I&rsquo;ll assume that you used the New Activity Wizard, like we did last week to create the TodoActivity. You can also try the &ldquo;LoginActivity&rdquo; template from the wizard, but we&rsquo;ll skip that for this tutorial.</p>

<h3>Let&rsquo;s Code</h3>

<p>Once you have both those activities set up, let&rsquo;s fill up their layouts. We need to add the following items to these layouts: two <code>EditText</code> fields for a username and password, two <code>TextViews</code> to be the labels for these inputs, and two <code>Buttons</code>, one to sign in/sign up, and one to switch from the sign up to sign in screen and vice versa.</p>

<p>Here&rsquo;s what my registration layout looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">android:paddingBottom=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingLeft=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingRight=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingTop=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;.RegisterActivity&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>        <span class="na">android:gravity=</span><span class="s">&quot;center_vertical&quot;</span>
</span><span class='line'>        <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;@string/username&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;EditText</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/register_username&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:ems=</span><span class="s">&quot;10&quot;</span>
</span><span class='line'>            <span class="na">android:inputType=</span><span class="s">&quot;text&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;requestFocus</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/EditText&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Password:&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;EditText</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/register_password&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:ems=</span><span class="s">&quot;10&quot;</span>
</span><span class='line'>            <span class="na">android:inputType=</span><span class="s">&quot;textPassword&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;Button</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/sign_up&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_gravity=</span><span class="s">&quot;right&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;register&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Sign Up&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/signInButton&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:textSize=</span><span class="s">&quot;17sp&quot;</span>
</span><span class='line'>        <span class="na">android:onClick=</span><span class="s">&quot;showLogin&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Already Have An Account? Log In!&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The login screen is very similar to that of the registration screen, with the same widgets in the same places, just different ids and labels, so we&rsquo;re just going to go over the registration screen in this tutorial and leave the login screen up as an exercise to the reader. (The code will be available on <a href="https://github.com/MichaelEvans/Parse-Android-Todo">Github</a> if you get stuck). We&rsquo;re going to want to implement that <code>register</code> function in our RegisterActivity, so let&rsquo;s do that next.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/20/login.png" width="300" height="500" title="Logging In" ></p>

<p>After declaring and binding variables to the two <code>EditText</code> fields (we&rsquo;ll call those <code>mUsernameField</code> and <code>mPasswordField</code>), we create our register function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="kd">final</span> <span class="n">View</span> <span class="n">v</span><span class="o">){</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">mUsernameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">mPasswordField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ParseUser</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ParseUser</span><span class="o">();</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">mUsernameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">mPasswordField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="na">signUpInBackground</span><span class="o">(</span><span class="k">new</span> <span class="n">SignUpCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">done</span><span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">RegisterActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">TodoActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>              <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>              <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// Sign up didn&#39;t succeed. Look at the ParseException</span>
</span><span class='line'>              <span class="c1">// to figure out what went wrong</span>
</span><span class='line'>              <span class="n">v</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://michaelevans.org/images/2013/08/20/registering.png" width="300" height="500" title="Registering" ></p>

<p>What&#8217; were doing here is a) bailing out early if the user fails to fill in one of the fields, b) disabling the button while the network request is running, so the user can&rsquo;t try to register multiple times by accident, c) creating a ParseUser object with the username and password from the <code>EditText</code> fields, and then calling <code>signUpInBackground</code>, with a callback which is run when the request is complete. If there is an error for any reason, we re-enable the registration button, so that the user can fix any issues and resubmit. (We&rsquo;ll get to error handling a little later.) If there isn&rsquo;t an error, we start the TodoActivity that we <a href="http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/">created last week</a>.</p>

<p>Huzzah! If you sign up, you now see a users table in your Parse console!</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/20/users.png" width="800" height="800" title="Users Console" ></p>

<h3>Making Things Belong</h3>

<p>Now we need to make some changes to the TodoActivity. The first thing we need to do is make the query that fetches the data only return Tasks where the user is the same as the logged in user. We can do that by adding the following line that will modify our ParseQuery:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">query</span><span class="o">.</span><span class="na">whereEqualTo</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span> <span class="n">ParseUser</span><span class="o">.</span><span class="na">getCurrentUser</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to make the Tasks belong to a user where they are created, which we can do by adding the following two statements when we are creating our new Tasks (we&rsquo;re also going to add the setters and getter for the user object on the Task model):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">t</span><span class="o">.</span><span class="na">setACL</span><span class="o">(</span><span class="k">new</span> <span class="n">ParseACL</span><span class="o">(</span><span class="n">ParseUser</span><span class="o">.</span><span class="na">getCurrentUser</span><span class="o">()));</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">ParseUser</span><span class="o">.</span><span class="na">getCurrentUser</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>These lines will make the Task only read/writeable by the owner, and set the user associated with them to the current user. Take a peek in your Parse console, and you&rsquo;ll see the Tasks now have an owner!</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/20/tasks.png" width="800" height="800" title="Tasks now belong!" ></p>

<p>We also want to make it possible for a user to log out. We&rsquo;ll do this by providing an option in the action bar settings menu. We can do this by adding an entry in the <code>res/menu/todo.xml</code> file like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;item</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/action_logout&quot;</span>
</span><span class='line'>    <span class="na">android:orderInCategory=</span><span class="s">&quot;100&quot;</span>
</span><span class='line'>    <span class="na">android:showAsAction=</span><span class="s">&quot;never&quot;</span>
</span><span class='line'>    <span class="na">android:title=</span><span class="s">&quot;@string/action_logout&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then all we need to do is wire up this action bar item. When options items are selected, there&rsquo;s a method that will be called in your activity named <code>onOptionsItemSelected</code>. We&rsquo;ll just fill this function out like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onOptionsItemSelected</span><span class="o">(</span><span class="n">MenuItem</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getItemId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">action_logout</span><span class="o">:</span>
</span><span class='line'>      <span class="n">ParseUser</span><span class="o">.</span><span class="na">logOut</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">LoginActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>      <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the user selects the logout option, call the <code>logout()</code> method, and then send them back to the login screen.</p>

<p>The last thing we need to do in the TodoActivity is prevent a user from accessing this class while no one is logged in. We can do that back up in the <code>onCreate</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ParseUser</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">ParseUser</span><span class="o">.</span><span class="na">getCurrentUser</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">currentUser</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>  <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">LoginActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>  <span class="n">finish</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If there is no user currenty logged in, stop the TodoActivity, and forward us to the LoginActivity.</p>

<h3>Error Handling</h3>

<p>As I alluded to before, we&rsquo;re also going to want to add error handling. This way, if the user puts in bad credentials, or they try to register a username that&rsquo;s already taken, they&rsquo;ll get an informative error message. Let&rsquo;s do this by adding a <code>TextView</code> in our layout to display the message: (You&rsquo;ll also want to add a <code>colors.xml</code> file that will declare what <code>@color/red</code> is.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;TextView</span>
</span><span class='line'>  <span class="na">android:id=</span><span class="s">&quot;@+id/error_messages&quot;</span>
</span><span class='line'>  <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>  <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>  <span class="na">android:layout_gravity=</span><span class="s">&quot;center_horizontal&quot;</span>
</span><span class='line'>  <span class="na">android:textColor=</span><span class="s">&quot;@color/red&quot;</span>
</span><span class='line'>  <span class="na">android:textAppearance=</span><span class="s">&quot;?android:attr/textAppearanceMedium&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we&rsquo;ll bind a variable to that view, and add the following error handling to the else statement from our <code>signUpInBackground</code> call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">switch</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getCode</span><span class="o">()){</span>
</span><span class='line'><span class="k">case</span> <span class="n">ParseException</span><span class="o">.</span><span class="na">USERNAME_TAKEN</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mErrorField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Sorry, this username has already been taken.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">ParseException</span><span class="o">.</span><span class="na">USERNAME_MISSING</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mErrorField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Sorry, you must supply a username to register.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">ParseException</span><span class="o">.</span><span class="na">PASSWORD_MISSING</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mErrorField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Sorry, you must supply a password to register.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mErrorField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">v</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will set some nice messages that will explain what the error is, or fall back to the message that Parse sends us, if it&rsquo;s some other type of problem.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/20/error_handling.png" width="300" height="500" title="Pretty Error Handling" ></p>

<h3>Possibilities for Next Time</h3>

<p>Next time we can take a look at adding some delete functionality, or maybe tabs for looking over completed/incomplete tasks. Another possiblity is adding social sign in, using Twitter and Facebook. Other suggestions are welcome!</p>

<p><strong>You can find the source on Github <a href="https://github.com/MichaelEvans/Parse-Android-Todo">here</a>.</strong></p>

<hr />

<p>Like this post? Questions, concerns or mistakes? Any other Android tutorials you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Building an Android To-Do List app using Parse]]></title>
    <link href="http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/"/>
    <updated>2013-08-14T22:08:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse</id>
    <content type="html"><![CDATA[<p>For a while now I&rsquo;ve been using <a href="http://www.parse.com">Parse</a> for small apps, it allows you to iterate quickly and create a backend for an app without too much work. It also seems like a perfect jumping off point for a series of Android tutorials, where we&rsquo;ll be building a &ldquo;Todo List&rdquo; application. (This tutorial assumes that you have <a href="http://developer.android.com/tools/sdk/eclipse-adt.html">Eclipse and the ADT</a> installed already.)</p>

<!-- more -->


<h2>The Setup</h2>

<p>First thing you&rsquo;ll want to do is sign up for Parse, and create a new Application. I called mine &ldquo;Todo&rdquo; here, but you can call it anything you&rsquo;d like. After you pick a name, you&rsquo;ll be presented a screen like the following, which contains your API keys. Do not lose these, this is how your app will connect to the Parse services. (I have removed my keys in the screenshot below.)</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/parse_keys.png" width="300" height="500" title="Parse Keys" ></p>

<p>Next, you&rsquo;ll want to download the Parse libraries from <a href="https://parse.com/downloads/android/Parse/latest">here</a>.</p>

<p>Back in Eclipse, open the New Project Wizard and create a new Android application. I set the minimum SDK version to Honeycomb in the screenshot below, but feel free to pick something newer if you&rsquo;d like.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/android_wizard.png" width="500" height="500" title="Android New Project Wizard" ></p>

<p>You&rsquo;ll then be taken to a screen to create your starting activity. Choose Blank Activity, and feel free to name it whatever you like.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/android_wizard_3.png" width="500" height="500" title="Android New Project Wizard" ></p>

<p>After you complete the wizard, you&rsquo;ll have a new project in your workspace. Copy the Parse jar file that you downloaded before to the <code>libs/</code> directory, and you&rsquo;ll be all set to begin coding.</p>

<h2>Let&rsquo;s Code</h2>

<h3>Parse Setup</h3>

<p>First thing we&rsquo;ll add is the code to set up Parse. In the onCreate method of your Activity, add the following (remember to replace APP_ID and CLIENT_ID with the keys you got from Parse earlier):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Parse</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;APP_ID&quot;</span><span class="o">,</span> <span class="s">&quot;CLIENT_ID&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ParseAnalytics</span><span class="o">.</span><span class="na">trackAppOpened</span><span class="o">(</span><span class="n">getIntent</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>That second line is optional, but it adds analytics tracking to your app, which is a nice feature to get for free. In addition to that initializer code, we&rsquo;ll need to add get some permissions for our app. Add the following two permissions to your AndroidManifest.xml file, above the <code>&lt;application&gt;</code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.permission.INTERNET&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Data Model</h3>

<p>Now we&rsquo;re able to interact with Parse using the included library. The next thing we&rsquo;ll want to do is to declare a Task model. This object will represent an individual Task Object in Parse&rsquo;s datastore. Create a new class named Task.java, and fill it out like the following:</p>

<figure class='code'><figcaption><span>Task.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.parse.ParseClassName</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.parse.ParseObject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@ParseClassName</span><span class="o">(</span><span class="s">&quot;Task&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Task</span> <span class="kd">extends</span> <span class="n">ParseObject</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Task</span><span class="o">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCompleted</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">getBoolean</span><span class="o">(</span><span class="s">&quot;completed&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCompleted</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">complete</span><span class="o">){</span>
</span><span class='line'>      <span class="n">put</span><span class="o">(</span><span class="s">&quot;completed&quot;</span><span class="o">,</span> <span class="n">complete</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">getString</span><span class="o">(</span><span class="s">&quot;description&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDescription</span><span class="o">(</span><span class="n">String</span> <span class="n">description</span><span class="o">){</span>
</span><span class='line'>      <span class="n">put</span><span class="o">(</span><span class="s">&quot;description&quot;</span><span class="o">,</span> <span class="n">description</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The annotation tells Parse what &ldquo;table&rdquo; that our object corresponds with, and then we are providing methods to get and set two properties: a description, and a completed status. In addition to those, Parse will give us created_at and updated_at fields for free.</p>

<p>Now that we&rsquo;ve declared our model, we need to register this class with our activity. Below the initialization code, add a line like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ParseObject</span><span class="o">.</span><span class="na">registerSubclass</span><span class="o">(</span><span class="n">Task</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Layout</h3>

<p>This tells Parse to use the annotation that we declared at the top of the model. The next thing we want to do is set up the layout for our activity. This XML file will represent the UI of our application. Open up the todo_activity.xml file, and replace the contents with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">android:paddingLeft=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingRight=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;.TodoActivity&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:orientation=</span><span class="s">&quot;horizontal&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;EditText</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/task_input&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>            <span class="na">android:ems=</span><span class="s">&quot;10&quot;</span>
</span><span class='line'>            <span class="na">android:inputType=</span><span class="s">&quot;text&quot;</span>
</span><span class='line'>            <span class="na">android:hint=</span><span class="s">&quot;Enter a Task&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;requestFocus</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/EditText&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;Button</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/submit_button&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;createTask&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Submit&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ListView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/task_list&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are declaring a layout that contains an input field and a button (for creating new tasks), as well as a ListView for showing the existing tasks. If you run what we&rsquo;ve done so far, you should end up with an application on your device that looks like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/step1.png" width="300" height="500" title="First Run" ></p>

<p>You can type in the input box, but if you hit the submit button, you&rsquo;ll notice the app will crash. Why&rsquo;s that? Because we said in our XML that the button will perform the <code>createTask</code> method when you click on it, but we never declared that method in our activity. Let&rsquo;s do that now.</p>

<p>In your onCreate method, let&rsquo;s get a reference to the EditText and ListView, since we&rsquo;ll be using these later. You can do that by declaring using the <code>findViewById()</code> method. We&rsquo;ll save the results of these calls as private variables. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mTaskInput</span> <span class="o">=</span> <span class="o">(</span><span class="n">EditText</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">task_input</span><span class="o">);</span>
</span><span class='line'><span class="n">mListView</span> <span class="o">=</span> <span class="o">(</span><span class="n">ListView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">task_list</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can create the createTask method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">createTask</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mTaskInput</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
</span><span class='line'>          <span class="n">Task</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Task</span><span class="o">();</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="n">mTaskInput</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="na">setCompleted</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="na">saveEventually</span><span class="o">();</span>
</span><span class='line'>          <span class="n">mTaskInput</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we are doing here is checking to see if the input has anything in it (don&rsquo;t want to create a task without a description), creating a new Task object, setting its fields, and then calling <code>saveEventually()</code>. This is a convenience method from Parse, that will queue this object to be saved. That way, if the user doesn&rsquo;t have a network connection, the task will be uploaded later when they are back online. Finally, we empty out the input field so that it&rsquo;s ready for another task.</p>

<p>Now if you type in a task and hit save, the input field will be blank, but if you go to your Parse Console, you&rsquo;ll see the data in the data browser:</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/parse_console.png" width="800" height="800" title="Parse Console" ></p>

<p>Now let&rsquo;s set up the app to fetch the Tasks from Parse.</p>

<h3>Querying</h3>

<p>First let&rsquo;s set up a TaskAdapter. An adapter is what you add to a ListView to decide what kind of behavior the list will have (layout of each row, etc.) Create a new class called TaskAdapter that extends from ArrayAdapter like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Paint</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.LayoutInflater</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.ViewGroup</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ArrayAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskAdapter</span> <span class="kd">extends</span> <span class="n">ArrayAdapter</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="n">mTasks</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">TaskAdapter</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="n">objects</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">task_row_item</span><span class="o">,</span> <span class="n">objects</span><span class="o">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">mTasks</span> <span class="o">=</span> <span class="n">objects</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">convertView</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="n">LayoutInflater</span> <span class="n">mLayoutInflater</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">mContext</span><span class="o">);</span>
</span><span class='line'>          <span class="n">convertView</span> <span class="o">=</span> <span class="n">mLayoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">task_row_item</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Task</span> <span class="n">task</span> <span class="o">=</span> <span class="n">mTasks</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">TextView</span> <span class="n">descriptionView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">task_description</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">descriptionView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">task</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">task</span><span class="o">.</span><span class="na">isCompleted</span><span class="o">()){</span>
</span><span class='line'>          <span class="n">descriptionView</span><span class="o">.</span><span class="na">setPaintFlags</span><span class="o">(</span><span class="n">descriptionView</span><span class="o">.</span><span class="na">getPaintFlags</span><span class="o">()</span> <span class="o">|</span> <span class="n">Paint</span><span class="o">.</span><span class="na">STRIKE_THRU_TEXT_FLAG</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>          <span class="n">descriptionView</span><span class="o">.</span><span class="na">setPaintFlags</span><span class="o">(</span><span class="n">descriptionView</span><span class="o">.</span><span class="na">getPaintFlags</span><span class="o">()</span> <span class="o">&amp;</span> <span class="o">(~</span><span class="n">Paint</span><span class="o">.</span><span class="na">STRIKE_THRU_TEXT_FLAG</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">convertView</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class will take an array of Tasks, and for each row in the ListView, set a TextView with the id <code>task_description</code> to the description value, and set a paint flag for Strikethrough if the task is completed. You&rsquo;ll also notice that this class inflates a layout called <code>task_row_item</code>, which we can create now.</p>

<p>In the <code>res/layouts/</code> folder, create a file called &lsquo;task_row_item.xml&rsquo;, and fill it with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:paddingTop=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingBottom=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;horizontal&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/task_description&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;center_vertical&quot;</span>
</span><span class='line'>        <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>        <span class="na">android:textAppearance=</span><span class="s">&quot;?android:attr/textAppearanceMedium&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just a basic TextView which will hold the description of the item. Now that we have the adapter set up, let&rsquo;s create one and apply it to our ListView. Back in the onCreate method of our Activity, create an instance of our TaskAdapter, and set its initial contents to a new ArrayList of Tasks, and then set the adapter of our ListView to this adapter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TaskAdapter</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;());</span>
</span><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">mAdapter</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll notice that nothing happens if you run the application again, since we didn&rsquo;t yet fetch any data from Parse. Create a new method called <code>updateData()</code> and put in the following code: (be sure to make a call to this method at the end of <code>onCreate()</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateData</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">ParseQuery</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="n">query</span> <span class="o">=</span> <span class="n">ParseQuery</span><span class="o">.</span><span class="na">getQuery</span><span class="o">(</span><span class="n">Task</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">query</span><span class="o">.</span><span class="na">findInBackground</span><span class="o">(</span><span class="k">new</span> <span class="n">FindCallback</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">done</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="n">tasks</span><span class="o">,</span> <span class="n">ParseException</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">tasks</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="n">mAdapter</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>              <span class="n">mAdapter</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">tasks</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will query Parse for all the Task objects, and return a list of them. Then we will clear the existing set of Tasks from our adapter, and replace the existing list with those. Now if you run the app, you&rsquo;ll be greeted with something like the following:</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/step2.png" width="300" height="500" title="Step 2" ></p>

<p>Let&rsquo;s also add this to our <code>createTask()</code> method, to insert the Task we just created at the top of the list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAdapter</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will provide the user with an immediate hint of what happened, rather than uploading it, and waiting to resync the data or something.</p>

<p>Now we&rsquo;re starting to have a functional app! Let&rsquo;s add one more feature though. When you tap on a ListView row, the &ldquo;completed&rdquo; status of the task should toggle.</p>

<h3>Let&rsquo;s Toggle!</h3>

<p>Let&rsquo;s register an OnItemClickListener for our class, so that we&rsquo;ll get a callback whenever a list item is clicked. We can do that with a call to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnItemClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we just make our Activity implement the <code>OnItemClickListener</code> interface, and override the <code>onItemClick</code> method. We can use some code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onItemClick</span><span class="o">(</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;</span> <span class="n">parent</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Task</span> <span class="n">task</span> <span class="o">=</span> <span class="n">mAdapter</span><span class="o">.</span><span class="na">getItem</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>  <span class="n">TextView</span> <span class="n">taskDescription</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">task_description</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span><span class="o">.</span><span class="na">setCompleted</span><span class="o">(!</span><span class="n">task</span><span class="o">.</span><span class="na">isCompleted</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">task</span><span class="o">.</span><span class="na">isCompleted</span><span class="o">()){</span>
</span><span class='line'>      <span class="n">taskDescription</span><span class="o">.</span><span class="na">setPaintFlags</span><span class="o">(</span><span class="n">taskDescription</span><span class="o">.</span><span class="na">getPaintFlags</span><span class="o">()</span> <span class="o">|</span> <span class="n">Paint</span><span class="o">.</span><span class="na">STRIKE_THRU_TEXT_FLAG</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>      <span class="n">taskDescription</span><span class="o">.</span><span class="na">setPaintFlags</span><span class="o">(</span><span class="n">taskDescription</span><span class="o">.</span><span class="na">getPaintFlags</span><span class="o">()</span> <span class="o">&amp;</span> <span class="o">(~</span><span class="n">Paint</span><span class="o">.</span><span class="na">STRIKE_THRU_TEXT_FLAG</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span><span class="o">.</span><span class="na">saveEventually</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will toggle the completion status of the clicked item, and then update the strikethrough, just as we did in the ArrayAdapter before. Then we&rsquo;ll make another call to <code>saveEventually()</code>, to update that task on Parse&rsquo;s servers, when a network connection is available.</p>

<p>That&rsquo;s it! Now you should be able to launch the application, and create, complete and un-complete tasks as you wish!</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/step3.png" width="300" height="500" title="Step 2" ></p>

<h2>Optimizations/Improvements</h2>

<p>Let&rsquo;s make some quick improvements to the app. First, let&rsquo;s extract the hardcoded strings in our layout to a strings.xml file, so that we can support other languages. Change the text in the <code>android:text=</code> attributes to something like <code>@string/submit_text</code>, and create a <code>strings.xml</code> file in <code>res/values</code> where these strings will live. This allows you to create other values folders for quick localization.</p>

<p>The other optimization that we&rsquo;ll make is regarding the caching. You&rsquo;ll notice that if you leave the application and come back, you&rsquo;re left with a blank white screen while the Tasks are loaded from Parse. This is a bit ugly, and leaves a bad user experience. We can mitigate that by adding caching, where the results of our query will be saved locally so that we have results instantly, and then we can request the updated tasks from the network. With Parse, this is dead simple. Add the following snippet to your <code>query</code> object before you do a findInBackground:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">query</span><span class="o">.</span><span class="na">setCachePolicy</span><span class="o">(</span><span class="n">CachePolicy</span><span class="o">.</span><span class="na">CACHE_THEN_NETWORK</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when you load up the app, you&rsquo;ll see the tasks from last time in the list, while the network is being queried.</p>

<h2>Possibilities for Next Time</h2>

<p>Next time we can take a look at adding multi-user support (so that not everyone shares a task list), and possibly some fancier UI, like a swipe-to-remove feature. Feel free to make other suggestions of things you&rsquo;d like to see!</p>

<p><strong>You can download the APK for this tutorial <a href="https://app.box.com/s/e79stk16p1b92w937e6q">here</a>, and find the source on Github <a href="https://github.com/MichaelEvans/Parse-Android-Todo">here</a>.</strong></p>

<hr />

<p>Like this post? Questions, concerns or mistakes? Any other Android tutorials you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Mavericks' Compressed Memory Feature in Ubuntu]]></title>
    <link href="http://michaelevans.org/blog/2013/06/12/getting-mavericks-compressed-memory-feature-in-ubuntu/"/>
    <updated>2013-06-12T00:16:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/06/12/getting-mavericks-compressed-memory-feature-in-ubuntu</id>
    <content type="html"><![CDATA[<p>On Monday, Apple announced a new update for it&rsquo;s desktop operating system, which will be named OS X Mavericks. As part of the annoucement, they touched on a few performance related features, including a new power saving API, which was called App Nap, as well as a memory compression feature, which would allow compress the memory of programs that are not currently active.</p>

<p>According to <a href="http://arstechnica.com/apple/2013/06/how-os-x-mavericks-works-its-power-saving-magic/">Ars Technica</a>, Apple is using a technique called Timer Coalescing to create App Nap. Apps that are not active will have their processes set to a lower priority, and therefore use less CPU/disk/etc, and thereby save power. This feature has been around on Linux for a long time, and apparently has been part of Windows as well.</p>

<p>I had not heard, however, of this compressed memory technique, although apparently it had been done many years ago by a program called &ldquo;RamDoubler&rdquo;. After some quick Googling, it seems that this is available via a kernel module called &ldquo;zram&rdquo;.</p>

<!-- more -->


<p>Wanna try it out? If you&rsquo;re running Precise or newer (12.04 or later), you&rsquo;re in luck. Just apt-get zram with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install zram-config</span></code></pre></td></tr></table></div></figure>


<p>and you&rsquo;re all set.</p>

<p>To see the effects of zram, just run <code>free -m</code> and you&rsquo;ll notice an increase in memory/swap space. I haven&rsquo;t thoroughly tested to see the performance gains, but it&rsquo;s interesting to see that some of the new OS X features are already available elsewhere.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Crouton on a Chromebook Pixel]]></title>
    <link href="http://michaelevans.org/blog/2013/06/11/running-crouton-on-a-chromebook-pixel/"/>
    <updated>2013-06-11T21:22:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/06/11/running-crouton-on-a-chromebook-pixel</id>
    <content type="html"><![CDATA[<p>So a few weeks back at Google IO, Google handed out an awesome laptop to attendees, the <a href="https://play.google.com/store/devices/details?id=chromebook_pixel_wifi">Chromebook Pixel</a>. For those who aren&rsquo;t familiar with it, the Pixel is a laptop running Google&rsquo;s ChromeOS, with the highest resolution screen available on a laptop (2560x1700). Unfortunately for me (and owners of the other Chromebooks), there&rsquo;s a few things you can&rsquo;t do in Chrome, like writing software in the new Android Studio!</p>

<p>In order to work around this limitation in ChromeOS, a developer at Google named David Schneider developed a set of scripts called <a href="https://github.com/dnschneid/crouton">crouton</a>. Crouton allows you to run Ubuntu inside a your ChromeOS system, so that you can easily swap back and forth between the operating systems. This is not limited to the Pixel, so if you&rsquo;re using another model Chromebook, even dating back to the CR-48, this guide should work for you.</p>

<!-- more -->


<h3>Installing Crouton</h3>

<h4>Step One: Enable Developer Mode (This might vary slightly depending on your model)</h4>

<p><em>Warning: Switching into or out of developer mode will wipe all the user data on the ChromeOS machine.</em></p>

<ol>
<li>Shutdown your machine.</li>
<li>Press and hold esc + refresh, and push the power button to turn on your computer.</li>
<li>Push Ctrl+D to be prompted to enable developer mode.</li>
<li>Hit enter, and watch the progress bar at the top of the screen as the system is wiped.</li>
<li>When the machine boots up again, either wait til it boots, or you can hit Ctrl+D again to start faster.</li>
</ol>


<h4>Step Two: Install Crouton</h4>

<ol>
<li>Download crouton <a href="http://goo.gl/fd3zc">here</a>.</li>
<li>Open a shell (Ctrl+Alt+T, type shell and hit enter) and run <code>sudo sh -e ~/Downloads/crouton -t xfce,touch</code>.</li>
<li>Go get a drink, come back and answer some questions.</li>
<li>Done! Start up an XFCE session with <code>sudo startxfce4</code>.</li>
</ol>


<h4>Step Three: Enjoy Ubuntu on your Chromebook!</h4>

<p>To switch back and forth between ChromeOS and Crouton, swap with Ctrl+Alt+Back and the sequence Ctrl+Alt+Forward followed by Ctrl+Alt+Refresh.</p>

<p>Pro tip: Increase the font size under the display settings, so that the text is a little more readable!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hands On with Google Glass]]></title>
    <link href="http://michaelevans.org/blog/2013/04/29/hands-on-with-google-glass/"/>
    <updated>2013-04-29T16:36:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/04/29/hands-on-with-google-glass</id>
    <content type="html"><![CDATA[<h3>The Pickup</h3>

<p>Last Wednesday I took the trip up to NYC, to the top floor of Chelsea Market to pick up a device that many have waited anxiously for. A device unlike anything else we&rsquo;ve seen before: Google&rsquo;s Glass. This is the Explorer Edition of the device, which is targeted towards developers, who attended Google&rsquo;s IO conference last year. I was fortunate to be invited to pick up my device on the first day of New York&rsquo;s pickups, which followed several pickup days in Mountain View the previous week.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/04/29/s_9e3e2acb-a746-4606-a034-1df2c8e2a3cc-0.jpeg" width="500" height="500" title="The View #throughglass" ></p>

<!-- more -->


<p>The pickup experience was very exciting, it included an informative one-on-one experience with a Glass Guide, who helped walk me through the device (which I had gotten some previous experience <a href="http://michaelevans.org/blog/2013/02/20/googles-project-glass/">a few months back</a>) and fit it to my face. The top floor of Chelsea Market allowed me to break in the camera of the device with a nice view of lower Manhattan.</p>

<p>I was able to try on all five colors that were available, but I ended up choosing charcoal (also known as black.) Other options included Cotton, Shale, Tangerine, and Sky (white, grey, orange and light blue, respectively.)</p>

<p>Configuring Glass was a snap, I opted to use the <a href="https://play.google.com/store/apps/details?id=com.google.glass.companion">MyGlass app</a> for Android, although users without the app, can use a web based utility to set up their device. After my scheduled pickup apoinment, another Explorer and myself walked up towards Times Square, and were greeted with several people giving us a look for wearing at our new eyeware.</p>

<p>So far people have either thought they look ridiculous, which might be the nature of the device, or the fact that I&rsquo;ve been wearing them overtop of my prescription glasses. This hasn&rsquo;t stopped anyone, however, from asking me to try them on and get a demo of the features.</p>

<h3>What&rsquo;s in the box?</h3>

<p>Included in the box is Glass (obviously), a micro USB cable and a AC adapter for it, a microfiber bag for storing Glass when it&rsquo;s not in use, and two visor attachments, one polarized for sun, and the other clear.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/04/29/IMG_1235.jpg" width="350" height="350" title="Bag o' goodies" ></p>

<p><img class="center" src="http://michaelevans.org/images/2013/04/29/IMG_1238.jpg" width="350" height="350" title="What's in the bag" ></p>

<p><img class="center" src="http://michaelevans.org/images/2013/04/29/IMG_1237.jpg" width="350" height="350" title="Nice simple box" ></p>

<p><img class="center" src="http://michaelevans.org/images/2013/04/29/IMG_1231.jpg" width="350" height="350" title="Sweet Shades" ></p>

<h3>Thoughts so far</h3>

<p>Since I&rsquo;ve only had the device for a few days, I&rsquo;ll need to post a review after I&rsquo;ve used it for a little longer. So far I&rsquo;ve enjoyed the hands-free navigation for wandering around DC, as well as taking some snapshots. I&rsquo;ve always thought it was a little awkward to reply to text messages and emails using your voice (which is why I never really did it on my phone), but maybe I&rsquo;ll warm up to it with Glass. The battery life has been pretty decent, even with the heavy usage of showing it off to excited friends.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/04/29/20130426_122245_854.jpg" width="400" height="400" title="#throughglass" ></p>

<h3>But wait&hellip;there&rsquo;s more!</h3>

<p>A few days after I returned with Glass, I was interviewed by The Fold, a flagship video series by The Washington Post! You can check out the video here:</p>

<iframe width="640" height="510" src="http://www.youtube.com/embed/iBrbVaY99kA " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowfullscreen></iframe>


<p>Got any questions you&rsquo;d like answered? Drop me a line below in the comments, on <a href="https://twitter.com/m_evans10">Twitter</a> or on <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>!</p>

<p><img class="center" src="http://michaelevans.org/images/2013/04/29/IMG_1246.jpg" width="350" height="350" title="Selfie." ></p>

<p>Obligatory selfie.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clickable Links in Android ListViews]]></title>
    <link href="http://michaelevans.org/blog/2013/03/29/clickable-links-in-android-listviews/"/>
    <updated>2013-03-29T00:14:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/03/29/clickable-links-in-android-listviews</id>
    <content type="html"><![CDATA[<p>As part of my newest app (<a href="https://play.google.com/store/apps/details?id=com.evans.hackernews">Hacker News for Android</a>), I needed to add the ability to click on links in a ListView, and have them open in the browser, while maintaining the ability for the user to click on the ListView row itself, and have the row listen to the click.</p>

<p>If you try using <code>Linkify</code> and <code>LinkMovementMethod</code>, which you&rsquo;d use on normal links in a TextView, you&rsquo;ll find that you can no longer use the ListView properly.</p>

<!-- more -->


<p>The solution I&rsquo;m using is slightly modified from this answer on StackOverflow <a href="http://stackoverflow.com/a/7327332/458603">here</a>.</p>

<figure class='code'><figcaption><span>LinkifiedTextView.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.text.Layout</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.text.Selection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.text.Spannable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.text.Spanned</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.text.style.ClickableSpan</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.AttributeSet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.MotionEvent</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinkifiedTextView</span> <span class="kd">extends</span> <span class="n">TextView</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">LinkifiedTextView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">TextView</span> <span class="n">widget</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Object</span> <span class="n">text</span> <span class="o">=</span> <span class="n">widget</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">text</span> <span class="k">instanceof</span> <span class="n">Spanned</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Spannable</span> <span class="n">buffer</span> <span class="o">=</span> <span class="o">(</span><span class="n">Spannable</span><span class="o">)</span> <span class="n">text</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="kt">int</span> <span class="n">action</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span>
</span><span class='line'>                  <span class="o">||</span> <span class="n">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">x</span> <span class="o">-=</span> <span class="n">widget</span><span class="o">.</span><span class="na">getTotalPaddingLeft</span><span class="o">();</span>
</span><span class='line'>              <span class="n">y</span> <span class="o">-=</span> <span class="n">widget</span><span class="o">.</span><span class="na">getTotalPaddingTop</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">x</span> <span class="o">+=</span> <span class="n">widget</span><span class="o">.</span><span class="na">getScrollX</span><span class="o">();</span>
</span><span class='line'>              <span class="n">y</span> <span class="o">+=</span> <span class="n">widget</span><span class="o">.</span><span class="na">getScrollY</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">Layout</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">widget</span><span class="o">.</span><span class="na">getLayout</span><span class="o">();</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">line</span> <span class="o">=</span> <span class="n">layout</span><span class="o">.</span><span class="na">getLineForVertical</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">off</span> <span class="o">=</span> <span class="n">layout</span><span class="o">.</span><span class="na">getOffsetForHorizontal</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">ClickableSpan</span><span class="o">[]</span> <span class="n">link</span> <span class="o">=</span> <span class="n">buffer</span><span class="o">.</span><span class="na">getSpans</span><span class="o">(</span><span class="n">off</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span>
</span><span class='line'>                      <span class="n">ClickableSpan</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">link</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(</span><span class="n">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">link</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">onClick</span><span class="o">(</span><span class="n">widget</span><span class="o">);</span>
</span><span class='line'>                  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">action</span> <span class="o">==</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">Selection</span><span class="o">.</span><span class="na">setSelection</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span>
</span><span class='line'>                              <span class="n">buffer</span><span class="o">.</span><span class="na">getSpanStart</span><span class="o">(</span><span class="n">link</span><span class="o">[</span><span class="mi">0</span><span class="o">]),</span>
</span><span class='line'>                              <span class="n">buffer</span><span class="o">.</span><span class="na">getSpanEnd</span><span class="o">(</span><span class="n">link</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just drop this in as a replacement for your normal TextView, and you&rsquo;ll have the clicks on links in your text intercepted. Hope this helps a fellow developer!</p>

<hr />

<p>Like this post? Any other Android tips you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Plus Messenger coming to ChromeOS?]]></title>
    <link href="http://michaelevans.org/blog/2013/03/28/google-plus-messenger-coming-to-chromeos/"/>
    <updated>2013-03-28T22:56:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/03/28/google-plus-messenger-coming-to-chromeos</id>
    <content type="html"><![CDATA[<p>While looking through the Chromium bug tracker today, I stumbled upon an <a href="https://code.google.com/p/chromium/issues/detail?id=167513">interesting bug</a>. The interesting part I found was <a href="https://code.google.com/p/chromium/issues/detail?id=167513#c18">a screenshot posted by one of the Chromium team members</a>.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/03/28/googlemessenger.png" width="500" height="500" title="Google Plus Messenger" ></p>

<p>If you look closely, it looks like the Google+ Messenger icon on the bottom right corner of the dock. Is this finally the integration of G+ Messenger and the web that we&rsquo;ve been waiting for since G+ Messenger was introduced? Maybe we&rsquo;ll find out in a few short weeks during <a href="http://michaelevans.org/blog/2013/03/14/google-io-2013-and-google-reader/">Google IO</a> this year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google IO 2013 and Google Reader]]></title>
    <link href="http://michaelevans.org/blog/2013/03/14/google-io-2013-and-google-reader/"/>
    <updated>2013-03-14T23:52:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/03/14/google-io-2013-and-google-reader</id>
    <content type="html"><![CDATA[<p>Yesterday was a bittersweet day for me in the world of Google. On the bright side, I was one of the lucky few to acquire a ticket to Google IO 2013. This will be my third Google IO, and I cannot be more excited to attend this year. The first year I went brought about the introduction to Android 3.1 (Honeycomb), which began the improvments for Android&rsquo;s Holo Theme, as well as layouts for tablets. Last year was even more groundbreaking, with the unveiling of a <a href="http://michaelevans.org/blog/2012/06/26/shots-from-outside-io-2012/">few</a> new <a href="http://michaelevans.org/blog/2012/09/07/nexus-q-review/">Nexus</a> <a href="http://michaelevans.org/blog/2012/07/03/nexus-7-review/">devices</a>, Android 4.1 (Jelly Bean), as well as <a href="http://michaelevans.org/blog/2013/02/20/googles-project-glass/">Project Glass</a>. I can&rsquo;t even imagine what they will have in store for us this year.</p>

<p>Here comes the bad news though: <a href="http://googleblog.blogspot.com/2013/03/a-second-spring-of-cleaning.html">Google Reader is being shut down</a>. If you don&rsquo;t know, Google Reader is an RSS reader for the web, a hub for all your subscriptions online. This pending shutdown has caused quite a stir, leading to many users scrambling to <a href="http://www.newsblur.com/">new</a> <a href="http://www.feedly.com/">RSS</a> readers, or <a href="http://blog.digg.com/post/45355701332/were-building-a-reader">building new ones</a>. (There was even a <a href="http://mashable.com/2013/03/14/white-house-google-reader/">petition on whitehouse.org</a> for the government to intervene…)</p>

<p>Google Reader was one of my favorite Google applications, so it&rsquo;s quite sad to see it go. Hopefully one of these replacements will provide a good enough experience so the switch is a bit less painful.</p>

<hr />

<p>Suggestions for a new RSS reader? Predictions for IO 2013? Drop me a line on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guide to Google Authorship]]></title>
    <link href="http://michaelevans.org/blog/2013/02/25/guide-to-google-authorship/"/>
    <updated>2013-02-25T21:22:00-05:00</updated>
    <id>http://michaelevans.org/blog/2013/02/25/guide-to-google-authorship</id>
    <content type="html"><![CDATA[<p>Today I noticed something interesting about my blog: I&rsquo;m now a verified author! What does that mean, you might ask? When one of the pages of my blog shows up in a Google search, it will look a little something like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2013/02/25/authorship.png" width="600" height="400" title="Google Authorship" ></p>

<!-- more -->


<p>Why might you want Google Authorship?</p>

<ul>
<li>It helps distinguish your content from other search results.</li>
<li>You might get more followers on Google+.</li>
</ul>


<p>Would you like to get Authorship on Google? It&rsquo;s actually extremely easy. Just follow the following steps:</p>

<ol>
<li>You need a Google+ profile with a profile picture of yourself.</li>
<li>On the profile editor of Google+, there is a &ldquo;Contributor to&rdquo; section; add your website here.</li>
<li>Add a link like this: <code>&lt;a href="[your profile URL]?rel=author"&gt;Google&lt;/a&gt;</code> somewhere on your website.</li>
<li>You&rsquo;re done! You can validate what your site would look like as a search result with a tool found <a href="http://www.google.com/webmasters/tools/richsnippets">here</a>.</li>
</ol>


<p>Keep in mind that Google doesn&rsquo;t <em>guarantee</em> to show author information in Google Web Search or Google News results.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sony unveils the PlayStation 4]]></title>
    <link href="http://michaelevans.org/blog/2013/02/20/sony-unveils-the-playstation-4/"/>
    <updated>2013-02-20T22:21:00-05:00</updated>
    <id>http://michaelevans.org/blog/2013/02/20/sony-unveils-the-playstation-4</id>
    <content type="html"><![CDATA[<p>Last week Sony confirmed the launch of the PlayStation 4 for 2013. They held a two hour announcement where they showed off some of the hardware, had developers speak about games that are in the pipeline, and touched on release info. There&rsquo;s definitely things that I liked, as well as a handful that I didn&rsquo;t. Here are some of the takeaways:</p>

<!-- more -->


<h2>Things to be excited about:</h2>

<ul>
<li><p>Immediate local play of digital titles while they download</p>

<p>  I think it&rsquo;s very cool to be able to play the digital downloads while they download. I&rsquo;ve often hoped for something like this, especially since the size of these games has gotten so large over the last few years.</p></li>
<li><p>Video replay/stream of your screen</p>

<p>  This is a very popular feature already for games like Call of Duty. There will be an explosion of PS4 videos on YouTube as soon as this is released.</p></li>
<li><p>Instant system hibernation</p>

<p>  I like the idea of being able to put my console to sleep in a game and pick up where I left off.</p></li>
<li><p>Allowing remote friends to assume control over your currently playing game</p>

<p>  &ldquo;Pass the controller&rdquo; sort of feeling over the internet. Not a bad idea.</p></li>
<li><p>The new system uses a DualShock 4 controller with a touchpad, share button, lightbar and headphone jack</p>

<p>  It&rsquo;s time for an update here. It will be interesting to see what developers do with the touchpad portion of the controller though.</p></li>
<li><p>Silent preloading of games you may be interested in</p>

<p>  Like I said before, file sizes are getting really large. It&rsquo;s actually a very smart idea to preload some games I might be interested in, so I can quickly try them out.</p></li>
</ul>


<h2>Things to be wary about:</h2>

<ul>
<li><p>Seemingly high bandwidth requirements</p>

<p>  Most of the things they showed off require lots of bandwidth. (Possibly a dealbreaker, depending on your internet provider)</p></li>
<li><p>No backwards compatibility with PS3 games?!</p>

<p>  Are you kidding me? This seems like a no brainer.</p></li>
<li><p>Game demos were renders</p>

<p>  I&rsquo;d have liked to see actual gameplay. We have no idea what games will look like yet. (Similarly disappointing is that the PS4 will output 4K video, but not 4K resolution for games.)</p></li>
<li><p>No price, no release date AND didn&rsquo;t actually see the console</p></li>
</ul>


<p>After that, now I&rsquo;m curious to see what Microsoft has to offer. I guess we&rsquo;ll see how the Xbox (720?) compares at E3 this summer!</p>

<hr />

<p>Anything I missed? Something you&rsquo;re excited about? Leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google's Project Glass]]></title>
    <link href="http://michaelevans.org/blog/2013/02/20/googles-project-glass/"/>
    <updated>2013-02-20T20:55:00-05:00</updated>
    <id>http://michaelevans.org/blog/2013/02/20/googles-project-glass</id>
    <content type="html"><![CDATA[<p>This morning Google put up some new details regarding Project Glass, including <a href="http://www.google.com/glass/start/how-it-feels/">a video</a> showing what it&rsquo;s like to wear Glass, and a <a href="http://www.google.com/glass/start/what-it-does/">list of things</a> that Glass can do. They are also sponsoring a new contest where anyone can <a href="http://www.google.com/glass/start/how-to-get-one/">join the Glass Explorers</a> (people who will be getting the Developer Edition). I was fortunate enough to be able to attend the Glass Foundry event in New York earlier this month, and got to experience Project Glass first hand. While I cannot say too much more than what you can gather from the Google page, I do have some exciting news!</p>

<!-- more -->


<p></p>

<p>Me (and my team, which included Jacob Hilker and Ryan Warner), won the Glass Foundry Hackathon! Like I said, I cannot share much more about it, but I do have this sweet picture of me wearing them:</p>

<p><img class="center" src="http://michaelevans.org/images/2013/02/20/glass.jpg" width="400" height="400" title="Project Glass" ></p>

<p>And the best part is the prize for the winners &ndash; a free Glass Explorer device (when they are available, of course).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boot Ubuntu from an SD Card on your Macbook Air (or Pro)]]></title>
    <link href="http://michaelevans.org/blog/2013/01/15/boot-ubuntu-from-an-sd-card-on-your-macbook-air/"/>
    <updated>2013-01-15T22:26:00-05:00</updated>
    <id>http://michaelevans.org/blog/2013/01/15/boot-ubuntu-from-an-sd-card-on-your-macbook-air</id>
    <content type="html"><![CDATA[<p>Recently I was trying to find a way to run Ubuntu off an SD card, so that I could use Linux on my Macbook Air (I&rsquo;d have dual booted, but my Air has the 128GB SSD, which doesn&rsquo;t leave much space after partitioning). Scouring the web, there&rsquo;s not that many resources indicating how, or if this is even possible. Fortunately for you, dear reader, it is!</p>

<p>Like I said, I&rsquo;m using a Macbook Air, so there&rsquo;s two steps to this process: creating a bootable flash drive with the Ubuntu image, and the actual installation.</p>

<!-- more -->


<h3>Creating a bootable install image</h3>

<p>This is pretty standard stuff, if you&rsquo;re reading this, it&rsquo;s likely you already know it. Heck, if you have an external DVD drive, you can skip this all together.</p>

<ol>
<li>Download the image from <a href="http://www.ubuntu.com/">Ubuntu</a></li>
<li>Hit up your terminal and use the following command to convert that image <code>hdiutil convert -format UDRW -o ~/path/to/target.img ~/path/to/ubuntu.iso</code></li>
<li>More terminal goodness: <code>diskutil list</code> to find which disk is your flash drive</li>
<li><code>diskutil unmountDisk /dev/diskN</code> where N is the disk number you found in step 3.</li>
<li><code>sudo dd if=/path/to/converted.img of=/dev/diskN bs=1m</code> to copy that image over to the flash drive.</li>
<li><code>diskutil eject /dev/diskN</code> to EJECT!</li>
</ol>


<h3>Setup the SD Card</h3>

<p>Now we&rsquo;re ready to install Ubuntu on the SD card (SD card must be at least 8 Gigs). I used a Class 10 card, and performance was…not terrible. I can&rsquo;t speak for any of the slower cards.</p>

<ol>
<li>Download rEFIt from the <a href="http://refit.sourceforge.net/">rEFIt website</a>. You should grab the .dmg version)</li>
<li>Open up Disk Utility (in /Applications/Utilities) and create a partition of 50 MB formatted &ldquo;Mac OS Extended Journaled&rdquo;</li>
<li>Fill up the rest of the card with a partition of MSDOS-FAT.</li>
<li>Before writing the Partition Table, hit the options button and select &ldquo;GUID Partition Table&rdquo;</li>
<li>Copy the &lsquo;efi&rsquo; directory onto the root of the 50MB partition created in step 2.</li>
<li>Get back to that trusty terminal <code>cd /Volumes/partition1/efi/refit</code> (where &lsquo;partition1&rsquo; is the name of that same parition) followed by <code>./enable.sh</code></li>
<li>Reboot your machine, and press and hold the option key to select a boot device. You should see ones for your main HD, the SD card, and the Live CD image. Select the Live CD image, and let&rsquo;s get installing.</li>
<li>During installation, you&rsquo;ll want to select the advanced partitioning setup. Select the /dev/sdb3 device (Should match the size of the SD card) for formatting and give them the mount point &ldquo;/&rdquo;. Device for boot loader installation must be also /dev/sdb3 (not /dev/sdb!). Ubuntu is going to give you a warning about no swap partition. That&rsquo;s alright, you don&rsquo;t need it.</li>
<li>This is going to take a while. Seriously, it&rsquo;s not gonna be fast. Go get a coffee.</li>
<li>Reboot when the install is complete, and hold option again to select that SD card. <em>Ta-da</em>!</li>
</ol>


<h5>Bonus Step:</h5>

<p>After you remove the SD card and try to boot normally, you&rsquo;ll likely hit this error &ldquo;grub error: no such device&rdquo;</p>

<p>You can fix this by booting into OS X and selecting your hard drive as the Startup Disk, which can be found in the System Preferences.</p>

<p><strong>Did you find this useful? Feel free to comment below, or follow me on <a href="http://www.twitter.com/m_evans10">Twitter</a> and let me know if you have any questions, or would like to suggest things for me to talk in the future.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Guide to Unlocking and Rooting your Android Phone]]></title>
    <link href="http://michaelevans.org/blog/2013/01/09/a-guide-to-unlocking-and-rooting-your-android-phone/"/>
    <updated>2013-01-09T10:45:00-05:00</updated>
    <id>http://michaelevans.org/blog/2013/01/09/a-guide-to-unlocking-and-rooting-your-android-phone</id>
    <content type="html"><![CDATA[<p>Something that is very popular in the Android world these days is rooting and installing custom ROMs on your phone. A problem that I&rsquo;ve found however, is that information regarding the process, and the terminology involved can be quite confusing for someone getting started, and as a result might discourage them. I decided to write up a series of blog posts discussing various parts of this process, so that it might help someone who wants to get involved, but doesn&rsquo;t know how. The phone that I&rsquo;ll be using for these tutorials is an <a href="http://amzn.to/VAQwcM">HTC One V</a>, which can be used on Virgin Mobile. It&rsquo;s a fairly modern phone, comes with a 1GHz single-core CPU, 512MB RAM, and a nice 3.7 inch LCD. This process will almost identical for other HTC phones, and very similar for many other Android devices.</p>

<p>Disclaimer: This may void your warranty, I take no responsibility, etc.</p>

<!--more-->


<h2>Part One: Unlocking your One V</h2>

<p>The first part of the process is called &ldquo;Rooting&rdquo; your device. Rooting basically means obtaining admin access on your device, which allows you to do all sorts of fun things down the line. In order to root your device however, there are a few steps you&rsquo;ll have to take. The first thing you&rsquo;ll need to do is unlock the bootloader. The bootloader is the software that loads the operating system of your phone. Normally this is locked to only start the software that ships on the device, but we are going to unlock it so that we may install custom software.</p>

<ol>
<li>Go to <a href="http://www.htcdev.com/">HTC Dev</a> and create yourself an account.</li>
<li>Download <a href="https://www.box.com/s/kuouqnnsjke4byd2u38n">these</a> Fastboot Files</li>
<li>Make a new folder on your C: or home directory called fastboot.</li>
<li>Extract the zip downloaded in step 2 to the new folder</li>
<li>Go <a href="http://www.htcdev.com/bootloader/">here</a> and select &ldquo;All Other Supported Models&rdquo; and then &ldquo;Begin Unlock bootloader&rdquo;</li>
<li>Check both checkboxes, and then proceed.</li>
<li>Power off your phone by holding the power button down for 5-7 seconds (the three keys will flash a few times then it will power off)</li>
<li>Hold the volume down button and power the device on, the device will boot to a white screen called &ldquo;HBOOT&rdquo;</li>
<li>Select &ldquo;Fastboot&rdquo; with volume up or down then press the power button once (you&rsquo;ll be in fastboot mode)</li>
<li>Plug your phone into your computer and open a Command Prompt.</li>
<li>cd to your folder where we put fastboot files (i.e c:\fastboot)</li>
<li>type this into your command prompt: <code>fastboot oem get_identifier_token</code></li>
<li>Select &amp; copy the text as per step 9 on the HTC Dev website</li>
<li>Paste your identifier token into the box at the bottom and submit
You will then receive an email from HTCDev with a link to the second    part of the instructions and your &ldquo;Unlock_code.bin&rdquo; file attached.</li>
<li>Download the &ldquo;Unlock_code.bin&rdquo; attachment from the email and save it to     the same folder that we extracted fastboot files.</li>
<li>Type this into your command prompt window: <code>fastboot flash unlocktoken Unlock_code.bin</code></li>
<li>The display will change on your phone, and ask you to confirm the unlock. press volume up to accept and power to confirm.</li>
</ol>


<p><strong>Congratulations</strong>! You have successfully unlocked the bootloader.</p>

<h2>Part Two: Rooting the One V</h2>

<p>The next step in this process, is actually obtaining root access. In order to do that, we will be installing an application called SuperSU, which allows you to run applications on your phone with administrative priveledges (also known as superuser or root).</p>

<ol>
<li>Download <a href="https://www.box.com/s/zli0tchzdbs6dtwgv7px">r1-primo-cdma-superboot.zip</a> to your computer and extract in any directory.</li>
<li>Power off your phone by holding the power button down for 5-7 seconds (the three keys will flash a few times then it will power off)</li>
<li>Hold volume down button while powering on, the device will boot to HBOOT (like we did before)</li>
<li>Select Fastboot with volume up or down then press power once</li>
<li>Connect your phone to PC</li>
<li>Double click ‘install-superboot-windows.bat’ (or mac or linux, depending on your platform)</li>
</ol>


<p><strong>Excellent!</strong> You now have root access on your phone. When you start up Android, you&rsquo;ll see a new application in your launcher. It&rsquo;s called SuperSU, and will ask you to allow/deny applications root access if they request it. This is useful for installing things like tethering applications, or modifying system files.</p>

<h2>Part Three: Installing Custom Recovery</h2>

<p>The last thing we are going to do as part of this guide is install a custom recovery. A recovery is a mode of the phone that allows you to backup/restore your device, or modify device files, like installing new software. This will be important if you&rsquo;d like to backup your device before wiping it to install custom software. In order to install ClockworkMod Recovery (which is probably the most popular recovery you&rsquo;ll find):</p>

<ol>
<li>Download ClockworkMod Recovery <a href="https://www.box.com/s/vj181v9mmi5tghm1za4b">here</a>.</li>
<li>Power off your phone by holding the power button down for 5-7 seconds (the three keys will flash a few times then it will power off)</li>
<li>Hold the volume down button while powering on, the device will boot to HBOOT (You should be getting the hang of this by now)</li>
<li>Select Fastboot with volume up or down then press power once</li>
<li>Connect your phone to PC</li>
<li>Type the following in to your command prompt: <code>adb flash recovery cwmrecovery.img</code></li>
<li>Restart your phone, and hold the volume down button. This time, select &ldquo;recovery&rdquo; and hit the power button.</li>
</ol>


<p>You&rsquo;re now in recovery mode! While we&rsquo;re here, let&rsquo;s make a backup.</p>

<ol>
<li>Scroll through the list of options 2 times using volume up or volume down. (Without doing this, you won&rsquo;t be able to select an option)</li>
<li>Use the power button to select &ldquo;Backup and restore&rdquo;</li>
<li>Select &ldquo;Backup&rdquo;</li>
<li>The backup process is now running. It will be a few minutes to complete.</li>
<li>Once complete, let&rsquo;s make sure the backup is successful.</li>
<li>Once again, select &ldquo;Backup and restore&rdquo;</li>
<li>Choose &ldquo;Restore&rdquo;. You will see your backup files, e.g: 2013-01-12.10.13.04</li>
<li>Pick &ldquo;Go Back&rdquo;</li>
<li>Select &ldquo;Reboot system&rdquo;</li>
</ol>


<p>It&rsquo;s probably best to copy that backup folder off your SD card and onto your computer in the event something happens to your SD card.</p>

<p><strong>Awesome</strong>! You&rsquo;re now all set to do all sorts of things, like installing custom roms. Be sure to check back for the next part of this series, where we will go over that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMware 'Easy Install' stuck on Ubuntu 12.04]]></title>
    <link href="http://michaelevans.org/blog/2012/12/20/vmware-easy-install-stuck-on-ubuntu-12-dot-04/"/>
    <updated>2012-12-20T19:34:00-05:00</updated>
    <id>http://michaelevans.org/blog/2012/12/20/vmware-easy-install-stuck-on-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p>I was trying to install Ubuntu 12.04 in VMware Player on my PC and ran into some trouble during the &ldquo;Easy Install&rdquo; process. The installation basically hung at the console after the installation was successful, with a message telling me that the VMware Tools were being installed, and that I could login and use the system while they were installing. Maybe 10 minutes later, there was no progress, so I restarted the VM.</p>

<p>I decided to log in and start X manually, so I could at least mess around with it in the meanwhile. Without being able to resize the window/use the shared clipboard, I decided to try to install the tools manually. No dice here, since VMware won&rsquo;t let you install the tools while the Easy Install process is still running. Here&rsquo;s what you can do to fix it:</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mv /etc/issue.backup /etc/issue
</span><span class='line'>sudo mv /etc/rc.local.backup /etc/rc.local
</span><span class='line'>sudo mv /opt/vmware-tools-installer/lightdm.conf /etc/init
</span></code></pre></td></tr></table></div></figure>


<p>Then follow these few steps to stop the easy install process:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Power off the virtual machine.
</span><span class='line'>Go to VM > Settings
</span><span class='line'>Select Floppy.
</span><span class='line'>Select 'Use physical drive', and set the dropdown to 'Auto Detect'.
</span><span class='line'>Power on the virtual machine and install VMware Tools.</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nexus Q Review]]></title>
    <link href="http://michaelevans.org/blog/2012/09/07/nexus-q-review/"/>
    <updated>2012-09-07T20:11:00-04:00</updated>
    <id>http://michaelevans.org/blog/2012/09/07/nexus-q-review</id>
    <content type="html"><![CDATA[<p>It’s a <em>what</em>? Ever since I returned from Google I/O, this is what people have been saying when they see the newest addition to my TV setup, the Nexus Q. It’s hard to blame them though, since it just looks so different, for a home theatre device. unlike those bland, black boxes that most living rooms are filled with, the Nexus Q is a heavy (about two pounds) sphere, which is lit by a ring of 32 LEDs. The top side of the Q spins freely to function as a volume knob, and can be tapped to mute.</p>

<p><img src="http://michaelevans.org/images/2012/09/07/q.jpeg" width="400" height="400" title="Nexus Q" ></p>

<p>On the back of the Q, things are less clean. There’s both micro HDMI and optical audio out, ethernet and a micro USB port for “encouraged hacking”. There’s also a set of banana connectors to allow you to hook up speakers to the built in 25-watt amplifier.</p>

<p>So how’s the UI of the Nexus Q, you might ask. Does it look as smooth as Jelly Bean does on the other devices that I <a href="http://michaelevans.org/blog/2012/07/03/nexus-7-review/">showed you a few weeks ago</a>? Funny thing is, the Nexus Q doesn’t have a UI of it’s own; it requires an Android device to set up. All you need to do is tap an NFC enabled device to the sphere, and it will take you to download the Nexus Q app from Google Play. Start up the app, log in with your Google account, and you’re all set to use the Q.</p>

<p>Since the Q doesn’t have it’s own UI, let’s take a look at the <a href="https://play.google.com/store/apps/details?id=com.google.android.setupwarlock">Nexus Q app for Android</a>.</p>

<p><img src="http://michaelevans.org/images/2012/09/07/qapp.jpeg" width="400" height="400" title="Nexus Q App" ></p>

<p>You don&rsquo;t really use the app for anything after setting up the Q initially, all the media is controlled through the Play Music, Play Movies and Youtube apps. All you need to do is hit the little triangle that will appear when you&rsquo;re on the same network as a Q.</p>

<p><img src="http://michaelevans.org/images/2012/09/07/music.png" width="400" height="400" title="Play Music with Q" ></p>

<p>My biggest complaint about the Q is the way you set it up to involve your friends. First you need to enable guest mode from the Q app, and then manually invite all the people you want to have access, which actually sends them an <strong>email</strong> to download the app. This seems like such a convoluted process, and I doubt people will actually care to do this. Not only that, but I see no way of revoking someone’s ability to use the Q after you’ve invited them. We all know that one person who takes their music privileges a little too far, but it seems that the only recourse in that event is to turn guest mode off all together.</p>

<p>Is it work $300 right now? Probably not, no. Unless you’re a huge consumer of Play media, you’ll probably be better off with a Roku, or something like that. Even if you <strong>are</strong> a consumer of Play content, you’re probably better off with a Google TV, since after all, that does other things.</p>
]]></content>
  </entry>
  
</feed>
